#include <CL/sycl.hpp>
#include <array>
#include <iostream>
#endif

using namespace sycl;

#define row 2
#define col 3

void VecAdd(queue &q,size_t size, const int a[DOMAIN_SIZE], const int b[DOMAIN_SIZE], int sum[DOMAIN_SIZE]) {
    range<1> num_items{size};
  auto e = q.parallel_for(num_items, [=](auto i) {
      sum[i] = a[i] + b[i];
  });
  e.wait();
}

int main() {
    auto R = range<1>{row*col};
   default_selector d_selector;
    queue q(d_selector);
    std::cout << "Device: " << q.get_device().get_info<info::device::name>() << std::endl;

    int **u = malloc_shared<int *>((row* sizeof(int*)), q);
    int **v = malloc_shared<int *>((row* sizeof(int*), q);
    int **p = malloc_shared<int *>((row* sizeof(int*) q);
    for(int i=0;i<row;i++) {
            u[i] = malloc_shared<int>(col * sizeof(int), q);

            v[i] = malloc_shared<int>(c * sizeof(int), q);
            p[i] = malloc_shared<int>(c * sizeof(int), q);
    }
     for (i = 0; i < row; i++)
{
        for (j = 0; j < col; j++)
{
	u[i][j] = 1;
	v[i][j] = 2;
}
}

     auto e=q.parallel_for(R, [=](auto i) {
//device side we wanted to add u and v. And store the result in p	
    });

     for (i = 0; i < row; i++)
        for (j = 0; j < col; j++)
      	std::cout << p[i][j] << "\t";
std::cout<<endl;
   free(u,q);
   free(v,q);
   free(p,q);
    return 0;
}